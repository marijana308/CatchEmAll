{"version":3,"sources":["components/Navbar.jsx","components/Card.jsx","components/CardContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","class","imgStyle","width","height","Card","props","className","onClick","handleClick","id","src","alt","img","style","info","marginTop","hide","fontFamily","textAlign","fontSize","color","padding","display","show","CardContainer","state","images","clickedImages","score","high_score","message","href","framework","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","item","filter","image","document","getElementById","rules","ReactDOM","findDOMNode","includes","setState","push","this","cardContainer","map","key","name","clicked","Component","App","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.74dfca91.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Navbar() {\r\n  return <div class=\"navigation\"></div>;\r\n}\r\n","import React from \"react\";\r\n\r\n// const style = {\r\n//   width: \"8rem\"\r\n// };\r\n\r\nconst imgStyle = {\r\n  width: \"8rem\",\r\n  height: \"8rem\"\r\n};\r\n\r\nexport default function Card(props) {\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      //style={style}\r\n      onClick={() => props.handleClick(props.id)}\r\n    >\r\n      <img\r\n        className=\"card-img-top\"\r\n        src={props.src}\r\n        alt={props.img}\r\n        style={imgStyle}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card.jsx\";\r\nimport images from \"../pokemonImages.json\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst style = {\r\n  // cardContainer: {\r\n  //   display: \"grid\",\r\n  //   padding: \"1rem\",\r\n  //   gridTemplateColumns: \"repeat(10, 1fr)\",\r\n  //   marginTop: \"4rem\"\r\n  // },\r\n  info: {\r\n    marginTop: \"8rem\"\r\n  },\r\n  hide: {\r\n    fontFamily: \"Kavoon\",\r\n    textAlign: \"center\",\r\n    fontSize: \"2rem\",\r\n    color: \"#1a60b1\",\r\n    padding: \"0.5rem\",\r\n    display: \"none\"\r\n  },\r\n  show: {\r\n    fontFamily: \"Kavoon\",\r\n    textAlign: \"center\",\r\n    fontSize: \"2rem\",\r\n    color: \"#1a60b1\",\r\n    padding: \"0.5rem\",\r\n    display: \"block\"\r\n  }\r\n};\r\n\r\nexport class CardContainer extends Component {\r\n  state = {\r\n    images: images,\r\n    clickedImages: [],\r\n    score: 0,\r\n    high_score: 0,\r\n    message: \"\",\r\n    href: \"#\",\r\n    framework: \"\"\r\n  };\r\n\r\n  //See Fisher-Yates shuffle in action! https://bost.ocks.org/mike/shuffle/\r\n  shuffle = array => {\r\n    let currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  handleClick = id => {\r\n    let clickedImages = this.state.clickedImages;\r\n    let item = images.filter(image => id === image.id);\r\n\r\n    let score = document.getElementById(\"score\");\r\n    let rules = document.getElementById(\"rules\");\r\n\r\n    ReactDOM.findDOMNode(score).style.display = \"block\";\r\n    ReactDOM.findDOMNode(rules).style.display = \"none\";\r\n\r\n    if (this.state.clickedImages.includes(item[0].img)) {\r\n      this.setState({ images: images });\r\n      this.setState({ clickedImages: [] });\r\n      if (this.state.score > this.state.high_score) {\r\n        this.setState({ high_score: this.state.score });\r\n      }\r\n      this.setState({ score: 0 });\r\n      this.setState({ message: \"RESET\" });\r\n    } else {\r\n      clickedImages.push(item[0].img);\r\n      this.setState({ clickedImages: clickedImages });\r\n      this.setState({ score: this.state.score + 1 });\r\n      this.setState({ images: this.shuffle(images) });\r\n      this.setState({ message: \"CORRECT\" });\r\n      this.setState({ framework: item[0].img });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={style.info}>\r\n        {/* <p className=\"help\">?</p> */}\r\n        <p id=\"score\" style={style.hide}>\r\n          Score: {this.state.score} | HighScore: {this.state.high_score}\r\n        </p>\r\n        <p id=\"rules\" style={style.show}>\r\n          Click on the pokemon to catch it but clicking a pokemon twice will\r\n          reset.\r\n        </p>\r\n        {/* <p>{this.state.message}</p>\r\n        <p>Pokemon: {this.state.framework}</p> */}\r\n        <div className=\"cardContainer\" style={style.cardContainer}>\r\n          {images.map(image => (\r\n            <Card\r\n              id={image.id}\r\n              key={image.id}\r\n              src={image.src}\r\n              name={image.img}\r\n              clicked={image.clicked}\r\n              handleClick={this.handleClick}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardContainer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport CardContainer from \"./components/CardContainer\";\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <CardContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}